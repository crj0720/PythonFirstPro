import datetime

t1 = datetime.date.today()
print(t1)
"""
2023-04-23
day1:p11 30:00
认识python
了解python的发展史
了解pycharm的使用
掌握python的注释
掌握python变量的定义与命名规范
掌握python基本操作符
掌握python输入与输出 
-----------------------------------------------------------
01.Python注释
单行注释#和多行注释""""""
特殊注释 #!/usr/bin/env python3;# -- coding=utf-8 --
02.数据类型和命名
数字、布尔值、字符串、字典、元组、列表
type()方法可以查看类型
03.基本操作符
算数运算符 +、-、*、/、**、%、//
比较运算符 ==、! =、>、<、>=、<=
逻辑运算符 and、or、not
赋值运算符 =、+=、-=、*=、/=、%=、**=、//=
04.格式化输出和输入
输入input
输出 s %d f o.format
-----------------------------------------------------------
"""
# 里面包含了python基本数据类型
# https://blog.csdn.net/qq_42076902/article/details/124728367
# 属性	    解释
# int(x)	将x转化为一个整数，向下取整
# float(x)	将x转化为一个浮点数
# complex(x [,imge])	将x转化为一个复数
# str(x)	将x转化为一个字符串
# repr(x)	将对象 x 转换为表达式字符串
# eval(x)	用来计算在字符串中的有效Python表达式,并返回一个对象，其实就是能计算字符串表达式，并得到结果
# tuple(s)	将序列s转化为一个元组
# list(s)	将序列s转化为一个列表
# set(s)	将序列s转化为可变集合，可用于列表去重
# dict()	创建一个字典
# frozenset(s)	将s转换为不可变集合
# chr(x)	将一个整数转化为其ASCIIi码对应的字符
# dict()	创建一个字典
# hex(x)	将一个整数转换为一个十六进制字符串
# oct(x)	将一个整数转换为一个八进制字符串
# ord(x)	将一个字符转化为一个整数，该整数为x对应的ASCII码

"""
2023-04-24
day02
分支：
    if 表达式:
    else :
    
    if 表达式:
    elif 表达式: 
    else :（选配）
循环：
    while 结合逻辑运算符循环嵌套
    for 循环遍历字符串、列表（可迭代对象）
备注：关键字
break  退出循环，中断结果
continue 跳过当前此次循环，继续此次之后的循环，并继续，直到结束
"""

"""
2023-04-25
1、string类型
        find() 查看索引下标值
        startswith() 首位是否为某某
        endswith() 末尾是否为某某
        lower() 全部变小
        upper() 全部变大
        索引[start:end:step] 

2、tuple类型
        (1,2,3,'a','cs',[1,2,3.4,'2a'],123,'2') 
        不能修改的，但是若元组下的列表类型的数据可以进行修改
        count() 统计谋数据项出现的次数
        索引[start:end:step]
        元组中若包含一个数据项('1ad',)  一定要有逗号！一定要有逗号！一定要有逗号！

3、set类型
        空集必须要用set()去创建，而不是{},因为{}是用来创建字典的
        不能往集合里面添加可变数据类型
        
4、dictionary类型
        {} 表示的是空字典 {'name': '李四', 'age': '30', 'pro': '软工', 'school': '浙大'}         
        
Python 的七个标准数据类型中：
不可变数据类型（4 个）：Number（数字）、Boolean（布尔）、String（字符串）、Tuple（元组）；
可变数据类型（3 个）：List（列表）、Dictionary（字典）、Set（集合）。
可变数据类型的内容可以随着函数的执行发生变化，而不可变数据类型的则不行。

问：如何判断一个变量的类型？
答：①使用type(变量名称)方法，返回变量的数据类型②isinstance(变量名称，数据类型)，只能返回True或False(真的还是假的)

列表、元组、字典、集合的比较：

列表[ ]（list）：有序可改变集合，允许重复数据。
元组( )（tuple）：有序不可改变集合，允许重复数据。
集合{ }（set）：无序无索引（索引为键值）集合，无重复数据。
字典{ }（dictionary）：无序，可变，有索引集合，无重复数据。
"""

"""
day04 
2023-04-26
什么是函数:一系列Python语句的组合，可以在程序中运行一次或者多次，
一般是完成具体的独立的功能
为什么要使用函数:
代码的复用最大化以及最小化冗余代码，整体代码结构清晰，问题局部化

函数定义：
def 函数名():
    函数体【一系列的python语句，表示独立的功能】
函数的调用：
    本质上就是去执行函数定义里面的代码块，在调用函数之前，必须先定义

缺省参数，在调用函数时如果没有传参数那么会使用定义函数时给的缺省值。缺省参数必须在参数列表的最后面，否则会报错
一个函数有时候会处理比当初声明的参数要多这就是不定长参数，定义函数时不用声明参数名。加了星号 (*)的变量aras会存放所有未命名的变量参数，aras为元组;而加~的变量kwaras会存放命名参数，即形如key=value的参数， kwaras为字典
Python中函数参数是引用传递 (注意不是值传递)对于不可变类型，因变量不能修改，所以运算不会影响到变量自身;而对于可变类型来说，函数体中的运算有可能会更改传入的参数变量。
"""
'''
day7
面向对象编程：oop[object oriented programming] 是一种python的编程思路
面向过程：就是我们一开始学习的，按照解决问题的步骤去写代码
【根据业务逻辑去写代码】
在思考问题的时候，首先分析怎么按照步骤去实现，
然后将问题解决拆解成若干各步骤，
并将这些步骤对应成方法一步一步的最终完成功能

面向对象：关注的是设计思维【找洗车店  给钱洗车】

出差
小明-- 什么时候出差 --买什么票【高铁、飞机、汽车】--回程时间
亲力亲为的去做【面向过程】

面向过程不足：小明没有更多的经历去考虑别的事情

boss--秘书【小明需要考虑的事情】--财务--目的：北京【面向对象】

boss有更多的精力去处理其他的时候，创造更多的价值

从计算机的角度来看：面向过程不适合做大项目，而面向对象适合做更大项目的设计
面向过程的关注点：怎么做
面向对象的关注点：谁来做


类和对象

类：是具有一组 相同或者相似特征【属性】和行为【方法】的一系列[多个]对象的组合

现实世界  计算机世界
行为------>方法
特征------>属性

对象：是实实在在的一个东西，类的实例化、具象化
类是对象的抽象化 而对象是类的一个实例


类的组成部分
类由3个部分构成
类的名称：类名
类的属性：一组数据
类的方法：允许对进行操作的方法（行为）

例子：创建一个人类
事物名称（类名）：人（person）
属性：身高（height）、年龄(age)
方法：吃(eat)、跑(run)

实例方法：在类的内部，使用def关键字来定义， 第一个参数默认是self[名字标识可以是其他的名字，但是这个位置必须被占用]

实例方法是归于 类的实例所有

属性：在类的内部定义的变量（类属性），定义在实例方法里面的变量（实例属性）
在方法内部定义【通过类似self.变量名】的变量（实例属性） 

__init__ 
1、python自带的内置函数具有特殊的函数 使用双下线包起来的【魔术方法】
2、是一个初始化的方法，用来定义实例属性 和初始化数据的，在创建对象的时候自动调用，不用手动去调用
3、利用传参的机制可以让我们定义功能更加强大并且方便的 类

self是什么
self和对象指向同一个内存地址，可以认为self就是对象的引用

self只有在类中定义实例方法时候才有意义，在调用时候不必传入相应的参数，二十由解释器自动去指向
self的名字是可以更改的 可以定义成其他名字， 只是约定俗成的定义成了self
self指的是类实例对象本身，相当于java中this

day08 
2023-05-08
析构方法的概述
当一个对象被删除或者被销毁时，python解释器也会默认调用一个方法，这个方法未__del__()方法，也称为析构方法
析构方法总结
1、当整个程序脚本执行完毕后会自动调用 del 方法
2、当对像被手动销毁时也会自动调用 del 方法
3、析构函数一般用于资源回收，利用del 方法销毁对象，回收内存等资源


在python中展现面向对象的三大特征：
封装、继承、多态
封装：指的就是把内容封装到某个地方，便于后面的使用，他需要把内容封装到某个地方，从另外一个地方去调用被封装的内容
对于封装来说，其实就是使用初始化构造方法将内容封装到对象中，然后通过对象直接或者self来获取被封装的内容

继承：和现实生活中的继承是一样的，也就是 子可以继承父的内容【属性和行为】（爸爸有的儿子都有，相反，儿子有的爸爸不一定有）
所以对于面向对象的继承来说 其实就是将多个类共有的方法提取到父类中，子类仅需继承父类而不必一一去实现
这样就可以极大的提高效率，减少代码的重复编写，精简代码的层级结构，便于扩展

class 类名（父类）：
    # 子类可以继承父类中
    pass 


多继承


从方法定义的形式可以看出来
1、类方法的第一个参数是类对象 cls 进而去引用类对象的属性和方法 必须用装饰器classmethod来修饰
2、实例方法的第一个参数必须是self,通过这个self可以去引用类属性或者实例属性，若存在相同名称实例属性和类属性的话，实例属性的优先级最高
3、静态方法不需要定义额外的参数，若是要引用属性的话，则可以通过类对象或者是实例对象去引用即可，必须用装饰器staticmethod来修饰
'''


